//Question:-
/*
Pool Puzzle
Your job is to take code snippets from the pool and place them into the blank lines in the code.
You may not use the same snippet more than once, and you wonâ€™t need to use all the snippets.
Your goal is to make a class that will compile and run and produce the output listed.

Code:-
public class StreamPuzzle {
public static void main(String[] args) {
SongSearch songSearch = _____________;
songSearch.___________;
__________.search("The Beatles");
________________________________;
}
}
class _____________ {
private final List<Song> songs =
new JukeboxData.Songs().getSongs();
void printTopFiveSongs() {
List<String> topFive = songs.stream()
.______________
.______________
.______________
.collect(_________);
System.out.println(topFive);
}
void search(String artist) {
________ = songs.stream()
._______________
._______________;
if (_______________) {
System.out.println(______________);
} else {
System.out.println(______________);
}
}
}


Output:-
%java StreamPuzzle
[Immigrant Song, With a Little
Help from My Friends, Hallucinate,
Pasos de cero, Cassidy]
With a Little Help from My Friends
No songs found by: The Beach Boys
 */

**************************************************************************************************************************************************************
Solution:-


public class StreamPuzzle {
    public static void main(String[] args) {
SongSearch songSearch = new SongSearch();
songSearch.printTopFiveSongs();;
songSearch.search("The Beatles");
songSearch.search("The Beach Boys");
}
}
class SongSearch{
private final List<Song> songs =
new JukeboxData.Songs().getSongs();
void printTopFiveSongs() {
List<String> topFive = songs.stream()
                            .sorted(Comparator.comparingInt(Song::getTimesPlayed))
                            .map(song -> song.getTitle())
                            .limit(5)
                            .collect(Collectors.toList());
System.out.println(topFive);
}
void search(String artist) {
Optional<Song> result = songs.stream()
                             .filter(song -> song.getArtist().equals(artist))
                             .findFirst();
if (result.isPresent()) {
System.out.println(result.get().getTitle());
} else {
System.out.println("No songs found by: " + artist);
}
}
}
